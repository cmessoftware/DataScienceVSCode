#!/usr/bin/env python3
"""
üîç SCRIPT: Explicaci√≥n del Manejo Autom√°tico de Valores NaN
=========================================================

Este script demuestra paso a paso qu√© significa que "Los valores NaN se manejan 
autom√°ticamente en el pipeline de preprocesamiento" en modelos de Machine Learning.

Autor: Asistente IA
Fecha: Julio 2025
"""

import pandas as pd
import numpy as np
from models import ChurnPredictor

def explain_nan_management():
    """
    Explica paso a paso c√≥mo el pipeline maneja autom√°ticamente los valores NaN
    """
    print('üîç EXPLICACI√ìN: ¬øQU√â SIGNIFICA "MANEJO AUTOM√ÅTICO DE NaN"?')
    print('=' * 65)
    
    # PASO 1: DATOS ORIGINALES CON NaN
    print('üìä PASO 1: DATOS ORIGINALES CON NaN')
    print('-' * 40)
    
    original_data = pd.DataFrame({
        'tenure': [1, np.nan, 24, 36, 12],          # Num√©rica con NaN
        'MonthlyCharges': [29.85, 56.95, np.nan, 91.5, 70.0],  # Num√©rica con NaN
        'TotalCharges': [100.0, np.nan, 800.0, 1200.0, 850.0], # Num√©rica con NaN
        'gender': ['Female', np.nan, 'Male', 'Female', 'Male'],   # Categ√≥rica con NaN
        'InternetService': ['DSL', 'Fiber optic', np.nan, 'DSL', 'No'], # Categ√≥rica con NaN
        'OnlineSecurity': ['No', 'Yes', np.nan, 'No', 'Yes'],     # Binaria con NaN
        'Contract': ['Month-to-month', np.nan, 'One year', 'Two year', 'Month-to-month']
    })
    
    print("Datos con valores NaN:")
    print(original_data)
    print(f"\nüö® Valores NaN por columna:")
    print(original_data.isnull().sum())
    
    print('\n‚ùå PROBLEMA: Los modelos de ML NO pueden trabajar con NaN')
    print('   Si intentas: LogisticRegression.fit(X_con_nan) ‚Üí ValueError!')
    
    # PASO 2: EL PIPELINE AUTOM√ÅTICO
    print('\n‚öôÔ∏è PASO 2: EL PIPELINE AUTOM√ÅTICO')
    print('-' * 40)
    
    predictor = ChurnPredictor()
    
    # Mostrar diagn√≥stico
    print("\nüîç Diagn√≥stico autom√°tico de valores faltantes:")
    predictor.diagnose_missing_values(original_data)
    
    # Crear preprocesador
    print('\nüîß Creando preprocesador con manejo autom√°tico...')
    preprocessor = predictor.create_preprocessor(original_data)
    
    # PASO 3: TRANSFORMACI√ìN AUTOM√ÅTICA
    print('\nüîÑ PASO 3: TRANSFORMACI√ìN AUTOM√ÅTICA')
    print('-' * 45)
    print('Durante preprocessor.fit_transform() sucede AUTOM√ÅTICAMENTE:')
    print('   1Ô∏è‚É£ SimpleImputer detecta valores NaN')
    print('   2Ô∏è‚É£ Los reemplaza seg√∫n la estrategia:')
    print('      ‚Ä¢ Num√©ricas: NaN ‚Üí mediana de la columna')
    print('      ‚Ä¢ Categ√≥ricas: NaN ‚Üí valor m√°s frecuente')
    print('   3Ô∏è‚É£ Aplica StandardScaler a num√©ricas')
    print('   4Ô∏è‚É£ Aplica OneHotEncoder a categ√≥ricas')
    print('   5Ô∏è‚É£ Retorna datos completamente num√©ricos')
    
    # Aplicar transformaci√≥n
    print('\n‚ö° Ejecutando transformaci√≥n...')
    transformed_X = preprocessor.fit_transform(original_data)
    
    # PASO 4: RESULTADO FINAL
    print('\nüìä PASO 4: RESULTADO FINAL')
    print('-' * 32)
    print(f'Shape original: {original_data.shape}')
    print(f'Shape transformado: {transformed_X.shape}')
    print(f'Tipo de datos: {type(transformed_X)} con dtype {transformed_X.dtype}')
    
    # Verificar que no hay NaN
    result_df = pd.DataFrame(transformed_X)
    has_nan = result_df.isna().any().any()
    print(f'¬øContiene NaN despu√©s?: {has_nan}')
    
    print('\nüìã Primeras filas del resultado transformado:')
    print(result_df.head())
    
    print('\n‚úÖ RESULTADO FINAL:')
    print('   ‚Ä¢ Todos los valores son num√©ricos (float64)')
    print('   ‚Ä¢ No hay ning√∫n NaN')
    print('   ‚Ä¢ Los modelos ML pueden entrenar sin errores')
    print('   ‚Ä¢ Los datos est√°n escalados y normalizados')
    
    # PASO 5: SIGNIFICADO DE "AUTOM√ÅTICO"
    print('\nüí° PASO 5: SIGNIFICADO DE "AUTOM√ÅTICO"')
    print('-' * 45)
    print('ü§î ¬øQu√© significa "autom√°tico"?')
    print('   üìù T√ö escribes simplemente:')
    print('      model.fit(X_train, y_train)')
    print('      model.predict(X_test)')
    print('')
    print('   ü§ñ EL PIPELINE hace internamente (SIN c√≥digo extra):')
    print('      1. Detecta NaN ‚Üí Los imputa autom√°ticamente')
    print('      2. Escala n√∫meros ‚Üí StandardScaler')
    print('      3. Codifica categor√≠as ‚Üí OneHotEncoder')
    print('      4. Env√≠a datos limpios al modelo')
    print('')
    print('   ‚ú® Todo esto sucede TRANSPARENTEMENTE')
    print('      No necesitas escribir c√≥digo de limpieza')
    print('      No necesitas imputer manualmente')
    print('      El pipeline se encarga de todo')
    
    return transformed_X, original_data

def demonstrate_with_models():
    """
    Demuestra c√≥mo los modelos entrenan sin problemas despu√©s del preprocesamiento
    """
    print('\nüöÄ DEMOSTRACI√ìN: ENTRENAMIENTO SIN PROBLEMAS')
    print('=' * 55)
    
    # Crear datos con NaN
    np.random.seed(42)
    data_with_nan = pd.DataFrame({
        'tenure': [1, np.nan, 24, 36, 12, 8, np.nan, 15],
        'MonthlyCharges': [29.85, 56.95, np.nan, 91.5, 70.0, 45.2, 85.3, np.nan],
        'gender': ['Female', np.nan, 'Male', 'Female', 'Male', 'Female', np.nan, 'Male'],
        'OnlineSecurity': ['No', 'Yes', np.nan, 'No', 'Yes', 'No', 'Yes', np.nan],
        'Contract': ['Month-to-month', np.nan, 'One year', 'Two year', 'Month-to-month', 'One year', np.nan, 'Two year']
    })
    
    # Variable objetivo (sin NaN)
    target_y = pd.Series([0, 1, 0, 1, 0, 1, 0, 1])
    
    print('üìä Datos de ejemplo para entrenamiento:')
    print(f'   Shape: {data_with_nan.shape}')
    print(f'   NaN por columna: {data_with_nan.isnull().sum().sum()} total')
    
    # Crear predictor y entrenar
    predictor = ChurnPredictor()
    
    print('\nüîß Creando preprocesador...')
    preprocessor = predictor.create_preprocessor(data_with_nan)
    
    print('\nü§ñ Creando modelos...')
    models = predictor.create_models()
    
    print('\nüéØ ENTRENANDO MODELOS (con datos que tienen NaN):')
    try:
        predictor.train_models(data_with_nan, target_y)
        print('\nüéâ ¬°√âXITO! Todos los modelos entrenaron correctamente')
        print('   ‚úÖ Los valores NaN fueron manejados autom√°ticamente')
        print('   ‚úÖ No hubo errores de ValueError')
        print('   ‚úÖ Los modelos est√°n listos para hacer predicciones')
        
    except Exception as e:
        print(f'\n‚ùå Error inesperado: {e}')
        
    return predictor

def real_case_example():
    """
    Simula un caso real del dataset Telco con problemas t√≠picos
    """
    print('\nüìã CASO REAL: DATASET TELCO CON PROBLEMAS T√çPICOS')
    print('=' * 60)
    
    # Simular problemas t√≠picos del dataset Telco
    problematic_telco = pd.DataFrame({
        'customerID': ['7590-VHVEG', '5575-GNVDE', '3668-QPYBK', '7795-CFOCW'],
        'tenure': [1, 34, 2, np.nan],  # NaN com√∫n
        'MonthlyCharges': [29.85, 56.95, 53.85, 42.30],
        'TotalCharges': [29.85, ' ', 108.15, np.nan],  # Espacios ‚Üí NaN
        'gender': ['Female', 'Male', 'Male', np.nan],
        'InternetService': ['DSL', 'DSL', np.nan, 'Fiber optic'],
        'OnlineSecurity': ['No', 'Yes', 'Yes', np.nan],
        'StreamingTV': ['No', 'No', 'Yes', 'No'],
        'Contract': ['Month-to-month', 'One year', np.nan, 'Month-to-month']
    })
    
    print('üö® Problemas t√≠picos encontrados:')
    print('   ‚Ä¢ TotalCharges con espacios en blanco')
    print('   ‚Ä¢ Valores NaN en columnas num√©ricas y categ√≥ricas')
    print('   ‚Ä¢ Mezcla de tipos de datos')
    
    # Convertir TotalCharges (simular el problema real)
    problematic_telco['TotalCharges'] = pd.to_numeric(
        problematic_telco['TotalCharges'], errors='coerce'
    )
    
    print(f'\nüìä Dataset despu√©s de conversi√≥n num√©rica:')
    print(problematic_telco)
    print(f'\nValores NaN por columna:')
    print(problematic_telco.isnull().sum())
    
    # Usar el predictor
    predictor = ChurnPredictor()
    print('\nüîç Diagn√≥stico autom√°tico:')
    predictor.diagnose_missing_values(problematic_telco.drop('customerID', axis=1))
    
    return problematic_telco

def main():
    """
    Funci√≥n principal que ejecuta todas las demostraciones
    """
    print('üéØ SCRIPT DE DEMOSTRACI√ìN: MANEJO AUTOM√ÅTICO DE VALORES NaN')
    print('=' * 70)
    print('Este script te muestra exactamente qu√© significa que el pipeline')
    print('maneja autom√°ticamente los valores NaN en Machine Learning.\n')
    
    # Explicaci√≥n principal
    transformed_X, original_data = explain_nan_management()
    
    # Demostraci√≥n con modelos
    predictor = demonstrate_with_models()
    
    # Caso real
    telco_data = real_case_example()
    
    print('\nüéâ RESUMEN FINAL')
    print('=' * 20)
    print('‚úÖ Los valores NaN se manejan AUTOM√ÅTICAMENTE significa:')
    print('   1. No necesitas escribir c√≥digo de limpieza')
    print('   2. No necesitas imputer manualmente')
    print('   3. No necesitas preocuparte por errores de NaN')
    print('   4. El pipeline se encarga de todo transparentemente')
    print('   5. Solo escribes: model.fit(X, y) y funciona')
    print('')
    print('üí° Estrategias autom√°ticas aplicadas:')
    print('   ‚Ä¢ Num√©ricas: NaN ‚Üí mediana')
    print('   ‚Ä¢ Categ√≥ricas: NaN ‚Üí valor m√°s frecuente')
    print('   ‚Ä¢ Binarias: NaN ‚Üí valor m√°s frecuente')
    print('')
    print('üöÄ ¬°Tu c√≥digo de ML funciona sin cambios!')

if __name__ == "__main__":
    main()
